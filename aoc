#!/usr/bin/env python3
from argparse import ArgumentParser
from copy import deepcopy
from functools import reduce
from itertools import dropwhile, groupby, takewhile
from sys import stdin


def day1(input):
    c = [sum(int(x) for x in g if x) for _, g in groupby(input, bool)]
    return max(c), sum(sorted(c)[-3:])


def day2(input):
    outcome = {
        "A": {"X": 3, "Y": 6, "Z": 0},
        "B": {"X": 0, "Y": 3, "Z": 6},
        "C": {"X": 6, "Y": 0, "Z": 3},
    }
    shape = {"X": 1, "Y": 2, "Z": 3}
    d = lambda k, v: next(p2 for p2, o in outcome[k].items() if o == v)
    decision = {p1: {"X": d(p1, 0), "Y": d(p1, 3), "Z": d(p1, 6)} for p1 in outcome}
    score = lambda l1, l2: outcome[l1][l2] + shape[l2]
    input = [l.split() for l in input]
    return (
        sum(score(l1, l2) for l1, l2 in input),
        sum(score(l1, decision[l1][l2]) for l1, l2 in input),
    )


def day3(input):
    p_lower = lambda l: ord(l) - ord("a") + 1
    p = lambda l: p_lower(l.lower()) + l.isupper() * p_lower("z")
    common_priority = lambda *ls: p(reduce(lambda l1, l2: l1 & l2, map(set, ls)).pop())
    return (
        sum(common_priority(l[: len(l) // 2], l[len(l) // 2 :]) for l in input),
        sum(common_priority(*input[i : i + 3]) for i in range(0, len(input), 3)),
    )


def day4(input):
    c = lambda r1, r2: r1[0] >= r2[0] and r1[1] <= r2[1]
    o = lambda r1, r2: max(r1[0], r2[0]) <= min(r1[1], r2[1])
    pairs = [[[int(x) for x in p.split("-")] for p in l.split(",")] for l in input]
    return (
        sum(c(r1, r2) or c(r2, r1) for r1, r2 in pairs),
        sum(o(r1, r2) for r1, r2 in pairs),
    )


def day5(input):
    stacks = [
        [x for x in s[::-1] if x != " "]
        for s in zip(
            *[[x for x in l[1::4]] for l in takewhile(lambda l: l[1] != "1", input)]
        )
    ]
    moves = [
        [int(x) for x in l.split() if x.isdigit()]
        for l in dropwhile(lambda l: not l.startswith("m"), input)
    ]
    cm9000 = lambda n, s: [s.pop() for _ in range(n)]
    cm9001 = lambda n, s: cm9000(n, s)[::-1]

    def unload(crane):
        ss = deepcopy(stacks)
        for n, s, t in moves:
            ss[t - 1].extend(crane(n, ss[s - 1]))
        return "".join([s[-1] for s in ss])

    return unload(cm9000), unload(cm9001)


def day6(input):
    input = input[0]
    first_unique = (
        lambda n: len(
            list(
                takewhile(
                    lambda s: len(set(s)) != n,
                    [input[i : i + n] for i in range(0, len(input) - n + 1)],
                )
            )
        )
        + n
    )
    return first_unique(4), first_unique(14)


parser = ArgumentParser()
days = {f.__name__: f for f in globals().values() if type(f) == type(lambda: None)}
parser.add_argument("day", choices=days)
print(days[parser.parse_args().day]([l.strip("\n") for l in stdin]))
